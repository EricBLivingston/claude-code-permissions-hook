# LLM Fallback Configuration (optional)
# When enabled, if no explicit allow/deny rule matches, consult a local LLM
# to assess the safety of the tool use request.
[llm_fallback]
enabled = true  # Set to false in main config to disable

# OpenAI-compatible endpoint (works with Ollama, llama.cpp, vLLM, etc.)
# Default: Ollama's OpenAI-compatible endpoint
# endpoint = "http://localhost:11434/v1"
# model = "dolphin-llama3:8b-v2.9-q8_0"

# OpenRouter Interface (uncomment to use OpenRouter instead of Ollama)
endpoint = "https://openrouter.ai/api/v1"
# model = "qwen/qwen3-coder"  # Model is: Qwen3 Coder 480B A35B (paid)
# model = "anthropic/claude-sonnet-4.5"
model = "anthropic/claude-haiku-4.5"
# model = "amazon/nova-lite-v1"

# Provider preferences (OpenRouter-specific, optional)
# Order of providers to try
# provider_preferences = ["chutes"]

# Request timeout in seconds
timeout_secs = 60

# Temperature for LLM responses (lower = more consistent)
temperature = 0.1

# Maximum retries if JSON parsing fails (gives LLM multiple attempts)
max_retries = 2

[includes]
# Load api_key from .env file in current directory
files = [".env"]

# Binary classification: ALLOW auto-approves, QUERY passes to user for review
# Timeouts and errors always pass to user (conservative default)

# System prompt for binary ALLOW/QUERY classification
# Customize this to adjust the LLM's behavior for your specific environment
system_prompt = """
You are a security expert that auto-approves clearly safe operations.
Your goal: reduce user interruptions by auto-approving obviously safe operations.

TWO CLASSIFICATIONS:
1. ALLOW - Auto-approve (100% confidence it's safe)
2. QUERY - Send to user for review (unsafe, ambiguous, or uncertain)

ALLOW ONLY clearly safe operations:
- Standard dev commands: cargo/npm/pip/go test|build|install, git status|log|diff
- Read/write project files: /home/<user>/project/*, /tmp/test*
- Info commands: ls, cat, ps, pwd (without pipes or redirects)
- Edit source code in project directory

QUERY everything else, including:
- System paths: /etc/*, /root/*, /sys/*, /usr/*, /var/*, /opt/*
- Destructive: rm -rf, dd, mkfs, sudo, chmod on system files
- Credentials: /etc/passwd, /etc/shadow, *.ssh/*, *.key, *.pem
- Network operations: curl, wget, network tools
- Shell meta-characters: ; && || ` $() |
- Path traversal: ../
- Unfamiliar or context-dependent tools
- ANY doubt or uncertainty

EXAMPLES:
- "cargo test" → ALLOW (standard dev command)
- "rm -rf /" → QUERY (destructive)
- "cat /etc/passwd" → QUERY (system file)
- "ls -la" → ALLOW (safe info command)
- "curl api.example.com" → QUERY (network operation)

RULE: When uncertain, always use QUERY. Only ALLOW if 100% confident.
"""
